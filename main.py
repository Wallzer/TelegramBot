import os
import asyncio
import datetime
import requests
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiohttp import web
from datab import init_db, add_user, increment_command_count, get_user_stats, get_all_users
import pyktok as pyk

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))

bot = Bot(token=TOKEN)
router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üê± –ö–æ—Ç"), KeyboardButton(text="üê∂ –°–æ–±–∞–∫–∞")],
        [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üé• –°–∫–∞—á–∞—Ç—å TikTok")],
        [KeyboardButton(text="‚òÅÔ∏è –ü–æ–≥–æ–¥–∞")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

#—Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏, —Ç—Ä–µ–±—É—é—â–∏–º–∏ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class DownloadState(StatesGroup):
    waiting_for_link = State()

class WeatherState(StatesGroup):
    waiting_for_place = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    await add_user(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ üëá",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ùì –ü–æ–º–æ—â—å"
@router.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_handler(message: types.Message):
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        "üê± –ö–æ—Ç - –ø–æ–ª—É—á–∏—à—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∞\n"
        "üê∂ –°–æ–±–∞–∫–∞ - –ø–æ–ª—É—á–∏—à—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏\n"
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∂—É, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞\n"
        "üé• –°–∫–∞—á–∞—Ç—å TikTok - —Å–∫–∞—á–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ\n"
        "‚òÅÔ∏è –ü–æ–≥–æ–¥–∞ - —É–∑–Ω–∞–µ—à—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ\n"
    )
    await message.answer(help_text, reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@router.message(lambda message: message.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_handler(message: Message):
    count = await get_user_stats(message.from_user.id)
    await message.answer(f"–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—ã {count} —Ä–∞–∑!", reply_markup=main_menu)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–∞
async def cat_img(message: types.Message):
    response = requests.get("https://api.thecatapi.com/v1/images/search")
    if response.status_code == 200:
        data = response.json()
        image_url = data[0]['url']
        await message.answer_photo(image_url)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—à–∫–∏!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üê± –ö–æ—Ç"
@router.message(lambda message: message.text == "üê± –ö–æ—Ç")
async def cat_handler(message: types.Message):
    await message.answer("meow üò∫", reply_markup=main_menu)
    await cat_img(message)
    await increment_command_count(message.from_user.id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±–∞–∫–∏
async def dog_img(message: types.Message):
    response = requests.get("https://api.thedogapi.com/v1/images/search")
    if response.status_code == 200:
        data = response.json()
        image_url = data[0]['url']
        await message.answer_photo(image_url)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üê∂ –°–æ–±–∞–∫–∞"
@router.message(lambda message: message.text == "üê∂ –°–æ–±–∞–∫–∞")
async def dog_handler(message: types.Message):
    await message.answer("woof-woof üê∂", reply_markup=main_menu)
    await dog_img(message)
    await increment_command_count(message.from_user.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üé• –°–∫–∞—á–∞—Ç—å TikTok"
@router.message(lambda message: message.text == "üé• –°–∫–∞—á–∞—Ç—å TikTok")
async def download_handler(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ üìé", reply_markup=main_menu)
    await state.set_state(DownloadState.waiting_for_link)

VIDEO_FOLDER = "."  # –ü–∞–ø–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤

async def wait_for_video(link):
    # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥ —Ç–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º
    link = link.replace("/", "_")
    link = link[24:10]  # –ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ—Ç –∫—É—Å–æ–∫ –ª–æ–≥–∏–∫–∏
    while True:
        for file in os.listdir(VIDEO_FOLDER):
            if file.endswith(".mp4") and file.startswith(link):
                return file
        await asyncio.sleep(1)

@router.message(DownloadState.waiting_for_link)
async def download(message: types.Message, state: FSMContext):
    await increment_command_count(message.from_user.id)
    link = message.text.strip()
    await message.answer("‚è≥ –ñ–¥–∏...", reply_markup=main_menu)
    try:
        pyk.save_tiktok(link, True, "data.csv")
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.", reply_markup=main_menu)
        await state.clear()
        return
    try:
        video_file = await wait_for_video(link)
        video_path = os.path.join(VIDEO_FOLDER, video_file)
        video = FSInputFile(video_path)
        await message.answer_video(video, caption="üé• –í–æ—Ç —Ç–≤–æ–µ –≤–∏–¥–µ–æ!", reply_markup=main_menu)
        os.remove(video_path)
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ.", reply_markup=main_menu)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚òÅÔ∏è –ü–æ–≥–æ–¥–∞"
@router.message(lambda message: message.text == "‚òÅÔ∏è –ü–æ–≥–æ–¥–∞")
async def weather_handler(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üåç", reply_markup=main_menu)
    await state.set_state(WeatherState.waiting_for_place)

# –°–ª–æ–≤–∞—Ä—å —Å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã
WEATHER_EMOJIS = {
    "—è—Å–Ω–æ": "‚òÄÔ∏è",
    "–æ–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è",
    "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚õÖ",
    "–¥–æ–∂–¥—å": "üåßÔ∏è",
    "—Å–Ω–µ–≥": "‚ùÑÔ∏è",
    "–≥—Ä–æ–∑–∞": "‚õàÔ∏è",
    "—Ç—É–º–∞–Ω": "üå´Ô∏è",
    "–º–æ—Ä–æ—Å—å": "üå¶Ô∏è",
    "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
    "—Å–Ω–µ–≥–æ–ø–∞–¥": "üå®Ô∏è",
}

@router.message(WeatherState.waiting_for_place)
async def get_weather(message: Message, state: FSMContext):
    API_KEY = os.getenv("WEATHER_API_KEY", "YOUR_OPENWEATHER_API_KEY")
    CITY = message.text.strip()
    url = f"http://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={API_KEY}&units=metric&lang=ru"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                temperature = data['main']['temp']
                description = data['weather'][0]['description'].capitalize()
                emoji = WEATHER_EMOJIS.get(description.lower(), "üåç")
                await message.answer(f"{temperature}¬∞C {description}{emoji}", reply_markup=main_menu)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.", reply_markup=main_menu)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞
@router.message(Command("adminspam"))
async def admin_spam(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ!")
        return

    parts = message.text.split(" ", 1)
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adminspam —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        return
    broadcast_text = parts[1]
    users = await get_all_users()
    sent_count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, broadcast_text)
            sent_count += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")


async def handle(request):
    return web.Response(text="–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!")

async def start_webserver():
    app = web.Application()
    app.router.add_get("/", handle)
    port = int(os.environ.get("PORT", 8080))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"Web-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await init_db()
    dispatcher = Dispatcher()
    dispatcher.include_router(router)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (–≤–∞–∂–Ω–æ –¥–ª—è Replit)
    asyncio.create_task(start_webserver())

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–æ—Ç–∞
    await dispatcher.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
